module Ex01Attempt

// Create a simplest workflow in which  failure of a computation is made explicit; for example, 
// in which each step of the workflow may either succeed, by returning a result Some(v), or fail, by returning 
// the value None. Y


// Whenever you define a new kind of workflow, it is useful to give a name to 
// the type of values or objects generated by that workflow.

// Here, let's call them Attempt object
type Attempt<'T> = (unit -> 'T option)


// An example of type signature for this builder object  
//type AttemptBuilder =
//    member Bind : p:Attempt<'T> * ('T -> Attempt<'U>) -> Attempt<'U>
//    member Delay : f:(unit -> Attempt<'T>) -> Attempt<'T>
//    member Return : x:'T -> Attempt<'T>
//    member ReturnFrom : x:Attempt<'T> -> Attempt<'T>


//let failIfBig n = attempt {if n > 1000 then return! fail else return n}